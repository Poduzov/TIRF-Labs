/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lasermanager;

/**
 * @author Denis Poduzov poduzov@gmail.com
 */
import com.fazecast.jSerialComm.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import lasermanager.Communicator.CommuncatorMessageHandler;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class MainForm extends javax.swing.JFrame {

    private final Configuration config;
    private final Communicator comm;
    private final String EmptyComName = "Offline";

    private final String MainTitle = "TIRF Labs Laser Manager";

    final JFileChooser fc = new JFileChooser();

    private String SeqFileName = null;

    private CommMonitorTask monitorTask;

    public MainForm() {
        initComponents();
        UpdateTitle();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });

        config = new Configuration();
        config.Load();

        comm = new Communicator();

        comm.MessageHandler = new CommMessageHandler();

        CalibOutBox.removeAllItems();
        for (int i = 0; i < Configuration.AO_COUNT; i++) {
            CalibOutBox.addItem("AO" + String.valueOf(i + 1));
        }

        DefaultTableModel model;
        String ids[];
        Object data[];

        model = (DefaultTableModel) VoltageTable.getModel();
        ids = new String[Configuration.AO_COUNT];
        for (int i = 0; i < Configuration.AO_COUNT; i++) {
            ids[i] = "AO " + String.valueOf(i + 1);
        }
        model.setColumnIdentifiers(ids);
        data = new Double[Configuration.AO_COUNT];
        for (int i = 0; i < Configuration.AO_COUNT; i++) {
            data[i] = 0.0d;
        }
        model.addRow(data);

        VoltageTable.getTableHeader().setReorderingAllowed(false);
        VoltageTable.getTableHeader().setResizingAllowed(false);

        model = (DefaultTableModel) WattageTable.getModel();
        ids = new String[Configuration.AO_COUNT];
        for (int i = 0; i < Configuration.AO_COUNT; i++) {
            ids[i] = "AO " + String.valueOf(i + 1);
        }
        model.setColumnIdentifiers(ids);
        data = new Double[Configuration.AO_COUNT];
        for (int i = 0; i < Configuration.AO_COUNT; i++) {
            data[i] = 0.0d;
        }
        model.addRow(data);

        VoltageTable.setRowHeight(55);
        VoltageTable.setDefaultRenderer(Object.class, new VoltageRenderer());
        VoltageTable.setDefaultEditor(Object.class, new VoltageEditor());

        WattageTable.setRowHeight(55);
        WattageTable.setDefaultRenderer(Object.class, new WattageRenderer());
        WattageTable.setDefaultEditor(Object.class, new WattageEditor());

        WattageTablePanel.setVisible(false);

        CalibTable.getColumnModel().getColumn(0).setCellRenderer(new NumericCellRenderer("0.00"));
        CalibTable.getColumnModel().getColumn(1).setCellRenderer(new NumericCellRenderer("0.0"));

        SeqTable.getTableHeader().setUI(null);
        SeqTable.setRowHeight(108);
        SeqTable.setDefaultRenderer(Object.class, new SeqStepRenderer());
        SeqTable.setDefaultEditor(Object.class, new SeqStepEditor((SequenceStepActionParam param) -> {
            SequenceStepActionHandler(param);
        }));
        SeqTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        SeqAddStep(0);

        WattageTable.getTableHeader().setReorderingAllowed(false);
        WattageTable.getTableHeader().setResizingAllowed(false);

        monitorTask = new CommMonitorTask();
        Thread commMonitorThread = new Thread(monitorTask);
        commMonitorThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        ToolsPanel = new javax.swing.JPanel();
        ComBox = new javax.swing.JComboBox<>();
        CommIndPanel = new javax.swing.JPanel();
        CommInd = new javax.swing.JPanel();
        MainTabbedPanel = new javax.swing.JTabbedPane();
        SeqTab = new javax.swing.JPanel();
        SeqToolsPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        SeqOpenButton = new javax.swing.JButton();
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        SeqSaveButton = new javax.swing.JButton();
        filler15 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        SeqSaveAsButton = new javax.swing.JButton();
        filler16 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        SeqDeleteButton = new javax.swing.JButton();
        filler17 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        SeqSendButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        SeqBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        SeqTable = new javax.swing.JTable();
        ManualTab = new javax.swing.JPanel();
        ManualToolsPanel = new javax.swing.JPanel();
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        ManualBox = new javax.swing.JComboBox<>();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        ManualWriteButton = new javax.swing.JButton();
        VoltageTablePanel = new javax.swing.JScrollPane();
        VoltageTable = new javax.swing.JTable();
        WattageTablePanel = new javax.swing.JScrollPane();
        WattageTable = new javax.swing.JTable();
        CalibrationPanel = new javax.swing.JPanel();
        CalibrationToolsPanel = new javax.swing.JPanel();
        CalibPanelControls = new javax.swing.JPanel();
        Filler01 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        CalibPanelOut = new javax.swing.JPanel();
        CalibOutLabel = new javax.swing.JLabel();
        CalibOutBox = new javax.swing.JComboBox<>();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jPanel5 = new javax.swing.JPanel();
        CalibOutSpinner = new javax.swing.JSpinner();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 30));
        jLabel3 = new javax.swing.JLabel();
        CalibOutSlider = new javax.swing.JSlider();
        CalibOutButton = new javax.swing.JButton();
        Filler02 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        CalibPanelResp = new javax.swing.JPanel();
        CalibRespLabel = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 40));
        jPanel4 = new javax.swing.JPanel();
        CalibRespSpinner = new javax.swing.JSpinner();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 30));
        jLabel2 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        CalibRespSlider = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jPanel2 = new javax.swing.JPanel();
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        CalibAddButton = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        CalibRemoveButton = new javax.swing.JButton();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        CalibSaveButton = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        CalibLoadButton = new javax.swing.JButton();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        CalibApplyButton = new javax.swing.JButton();
        CalibTablePanel = new javax.swing.JScrollPane();
        CalibTable = new javax.swing.JTable();
        StatusPanel = new javax.swing.JPanel();
        StatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TIRF Labs Laser manager V0.1");
        setBackground(new java.awt.Color(255, 255, 255));

        MainPanel.setLayout(new java.awt.BorderLayout());

        ComBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ComBox.setLightWeightPopupEnabled(false);
        ComBox.setMaximumSize(new java.awt.Dimension(80, 30));
        ComBox.setMinimumSize(new java.awt.Dimension(80, 30));
        ComBox.setPreferredSize(new java.awt.Dimension(80, 30));

        CommIndPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(7, 7, 7, 7));
        CommIndPanel.setPreferredSize(new java.awt.Dimension(30, 30));

        CommInd.setBackground(new java.awt.Color(0, 153, 0));
        CommInd.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout CommIndLayout = new javax.swing.GroupLayout(CommInd);
        CommInd.setLayout(CommIndLayout);
        CommIndLayout.setHorizontalGroup(
            CommIndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );
        CommIndLayout.setVerticalGroup(
            CommIndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CommIndPanelLayout = new javax.swing.GroupLayout(CommIndPanel);
        CommIndPanel.setLayout(CommIndPanelLayout);
        CommIndPanelLayout.setHorizontalGroup(
            CommIndPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommIndPanelLayout.createSequentialGroup()
                .addComponent(CommInd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        CommIndPanelLayout.setVerticalGroup(
            CommIndPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommIndPanelLayout.createSequentialGroup()
                .addComponent(CommInd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ToolsPanelLayout = new javax.swing.GroupLayout(ToolsPanel);
        ToolsPanel.setLayout(ToolsPanelLayout);
        ToolsPanelLayout.setHorizontalGroup(
            ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CommIndPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ToolsPanelLayout.setVerticalGroup(
            ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ComBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CommIndPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(ToolsPanel, java.awt.BorderLayout.PAGE_START);

        SeqTab.setAlignmentY(0.0F);
        SeqTab.setLayout(new java.awt.BorderLayout());

        SeqToolsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 10));
        SeqToolsPanel.setMaximumSize(new java.awt.Dimension(99999, 50));
        SeqToolsPanel.setMinimumSize(new java.awt.Dimension(129, 50));
        SeqToolsPanel.setPreferredSize(new java.awt.Dimension(878, 50));
        SeqToolsPanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.X_AXIS));

        SeqOpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/open.png"))); // NOI18N
        SeqOpenButton.setToolTipText("Open");
        SeqOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeqOpenButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SeqOpenButton);
        jPanel3.add(filler13);

        SeqSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/save.png"))); // NOI18N
        SeqSaveButton.setToolTipText("Save");
        SeqSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeqSaveButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SeqSaveButton);
        jPanel3.add(filler15);

        SeqSaveAsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/saveas.png"))); // NOI18N
        SeqSaveAsButton.setToolTipText("Save as...");
        SeqSaveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeqSaveAsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SeqSaveAsButton);
        jPanel3.add(filler16);

        SeqDeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/delete.png"))); // NOI18N
        SeqDeleteButton.setToolTipText("Delete All");
        SeqDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeqDeleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SeqDeleteButton);
        jPanel3.add(filler17);

        SeqSendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/upload.png"))); // NOI18N
        SeqSendButton.setToolTipText("Apply Sequence");
        SeqSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeqSendButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SeqSendButton);

        SeqToolsPanel.add(jPanel3, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.X_AXIS));

        SeqBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Voltage, V", "Wattage, mW" }));
        SeqBox.setMaximumSize(new java.awt.Dimension(130, 30));
        SeqBox.setMinimumSize(new java.awt.Dimension(130, 30));
        SeqBox.setPreferredSize(new java.awt.Dimension(130, 30));
        SeqBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SeqBoxItemStateChanged(evt);
            }
        });
        jPanel6.add(SeqBox);

        SeqToolsPanel.add(jPanel6, java.awt.BorderLayout.EAST);

        SeqTab.add(SeqToolsPanel, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(32767, 450));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 450));

        SeqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null"
            }
        ));
        SeqTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(SeqTable);

        SeqTab.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        MainTabbedPanel.addTab("Sequence", SeqTab);

        ManualTab.setLayout(new javax.swing.BoxLayout(ManualTab, javax.swing.BoxLayout.Y_AXIS));

        ManualToolsPanel.setMaximumSize(new java.awt.Dimension(32767, 52));
        ManualToolsPanel.setLayout(new javax.swing.BoxLayout(ManualToolsPanel, javax.swing.BoxLayout.LINE_AXIS));
        ManualToolsPanel.add(filler11);

        ManualBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ManualBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Voltage, V", "Wattage, mW" }));
        ManualBox.setLightWeightPopupEnabled(false);
        ManualBox.setMaximumSize(new java.awt.Dimension(130, 30));
        ManualBox.setMinimumSize(new java.awt.Dimension(130, 30));
        ManualBox.setPreferredSize(new java.awt.Dimension(130, 30));
        ManualBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ManualBoxItemStateChanged(evt);
            }
        });
        ManualToolsPanel.add(ManualBox);
        ManualToolsPanel.add(filler12);

        ManualWriteButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ManualWriteButton.setText("Set Values");
        ManualWriteButton.setMaximumSize(new java.awt.Dimension(130, 30));
        ManualWriteButton.setMinimumSize(new java.awt.Dimension(130, 30));
        ManualWriteButton.setPreferredSize(new java.awt.Dimension(130, 30));
        ManualWriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualWriteButtonActionPerformed(evt);
            }
        });
        ManualToolsPanel.add(ManualWriteButton);

        ManualTab.add(ManualToolsPanel);

        VoltageTablePanel.setMaximumSize(new java.awt.Dimension(32767, 90));
        VoltageTablePanel.setPreferredSize(new java.awt.Dimension(452, 90));

        VoltageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        VoltageTable.setColumnSelectionAllowed(true);
        VoltageTable.getTableHeader().setReorderingAllowed(false);
        VoltageTablePanel.setViewportView(VoltageTable);
        VoltageTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ManualTab.add(VoltageTablePanel);

        WattageTablePanel.setMaximumSize(new java.awt.Dimension(32767, 90));
        WattageTablePanel.setPreferredSize(new java.awt.Dimension(452, 90));

        WattageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        WattageTable.setColumnSelectionAllowed(true);
        WattageTable.getTableHeader().setReorderingAllowed(false);
        WattageTablePanel.setViewportView(WattageTable);
        WattageTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ManualTab.add(WattageTablePanel);

        MainTabbedPanel.addTab("Manual Control", ManualTab);

        CalibrationPanel.setLayout(new java.awt.BorderLayout());

        CalibrationToolsPanel.setMaximumSize(new java.awt.Dimension(330, 300));
        CalibrationToolsPanel.setMinimumSize(new java.awt.Dimension(330, 300));
        CalibrationToolsPanel.setPreferredSize(new java.awt.Dimension(330, 300));
        CalibrationToolsPanel.setLayout(new javax.swing.BoxLayout(CalibrationToolsPanel, javax.swing.BoxLayout.Y_AXIS));

        CalibPanelControls.setAlignmentX(0.0F);
        CalibPanelControls.setMaximumSize(new java.awt.Dimension(320, 175));
        CalibPanelControls.setMinimumSize(new java.awt.Dimension(320, 175));
        CalibPanelControls.setPreferredSize(new java.awt.Dimension(320, 175));
        CalibPanelControls.setLayout(new javax.swing.BoxLayout(CalibPanelControls, javax.swing.BoxLayout.X_AXIS));
        CalibPanelControls.add(Filler01);

        CalibPanelOut.setMaximumSize(new java.awt.Dimension(150, 200));
        CalibPanelOut.setMinimumSize(new java.awt.Dimension(150, 200));
        CalibPanelOut.setPreferredSize(new java.awt.Dimension(150, 200));
        CalibPanelOut.setLayout(new javax.swing.BoxLayout(CalibPanelOut, javax.swing.BoxLayout.Y_AXIS));

        CalibOutLabel.setText("Analog Output");
        CalibOutLabel.setMaximumSize(new java.awt.Dimension(150, 30));
        CalibOutLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        CalibOutLabel.setPreferredSize(new java.awt.Dimension(150, 30));
        CalibPanelOut.add(CalibOutLabel);
        CalibOutLabel.getAccessibleContext().setAccessibleName("");
        CalibOutLabel.getAccessibleContext().setAccessibleDescription("");

        CalibOutBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibOutBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AO1", "AO2", "AO3", "AO4", "AO5", "AO6", "AO7", "AO8" }));
        CalibOutBox.setAlignmentX(0.0F);
        CalibOutBox.setMaximumSize(new java.awt.Dimension(100, 30));
        CalibOutBox.setMinimumSize(new java.awt.Dimension(100, 30));
        CalibOutBox.setPreferredSize(new java.awt.Dimension(100, 30));
        CalibPanelOut.add(CalibOutBox);
        CalibPanelOut.add(filler7);

        jPanel5.setAlignmentX(0.0F);
        jPanel5.setMaximumSize(new java.awt.Dimension(150, 30));
        jPanel5.setMinimumSize(new java.awt.Dimension(150, 30));
        jPanel5.setPreferredSize(new java.awt.Dimension(150, 30));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        CalibOutSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibOutSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 5.0d, 0.01d));
        CalibOutSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(CalibOutSpinner, "0.00"));
        CalibOutSpinner.setMaximumSize(new java.awt.Dimension(100, 30));
        CalibOutSpinner.setMinimumSize(new java.awt.Dimension(100, 30));
        CalibOutSpinner.setPreferredSize(new java.awt.Dimension(100, 30));
        CalibOutSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CalibOutSpinnerStateChanged(evt);
            }
        });
        jPanel5.add(CalibOutSpinner);
        jPanel5.add(filler4);

        jLabel3.setText("V");
        jLabel3.setMaximumSize(new java.awt.Dimension(40, 30));
        jLabel3.setMinimumSize(new java.awt.Dimension(30, 30));
        jLabel3.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel5.add(jLabel3);

        CalibPanelOut.add(jPanel5);

        CalibOutSlider.setValue(0);
        CalibOutSlider.setAlignmentX(0.0F);
        CalibOutSlider.setMaximumSize(new java.awt.Dimension(150, 30));
        CalibOutSlider.setMinimumSize(new java.awt.Dimension(150, 30));
        CalibOutSlider.setPreferredSize(new java.awt.Dimension(150, 30));
        CalibOutSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CalibOutSliderStateChanged(evt);
            }
        });
        CalibPanelOut.add(CalibOutSlider);

        CalibOutButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/upload.png"))); // NOI18N
        CalibOutButton.setText("Apply Value");
        CalibOutButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibOutButton.setMaximumSize(new java.awt.Dimension(150, 40));
        CalibOutButton.setMinimumSize(new java.awt.Dimension(150, 40));
        CalibOutButton.setPreferredSize(new java.awt.Dimension(150, 40));
        CalibOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibOutButtonActionPerformed(evt);
            }
        });
        CalibPanelOut.add(CalibOutButton);

        CalibPanelControls.add(CalibPanelOut);
        CalibPanelControls.add(Filler02);

        CalibPanelResp.setMaximumSize(new java.awt.Dimension(150, 200));
        CalibPanelResp.setMinimumSize(new java.awt.Dimension(150, 200));
        CalibPanelResp.setPreferredSize(new java.awt.Dimension(150, 200));
        CalibPanelResp.setLayout(new javax.swing.BoxLayout(CalibPanelResp, javax.swing.BoxLayout.Y_AXIS));

        CalibRespLabel.setText("Response");
        CalibRespLabel.setMaximumSize(new java.awt.Dimension(150, 30));
        CalibRespLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        CalibRespLabel.setPreferredSize(new java.awt.Dimension(150, 30));
        CalibPanelResp.add(CalibRespLabel);
        CalibPanelResp.add(filler6);

        jPanel4.setAlignmentX(0.0F);
        jPanel4.setMinimumSize(new java.awt.Dimension(150, 30));
        jPanel4.setPreferredSize(new java.awt.Dimension(150, 30));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.X_AXIS));

        CalibRespSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibRespSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 2000.0d, 0.1d));
        CalibRespSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(CalibRespSpinner, "0.0"));
        CalibRespSpinner.setMaximumSize(new java.awt.Dimension(100, 30));
        CalibRespSpinner.setMinimumSize(new java.awt.Dimension(100, 30));
        CalibRespSpinner.setPreferredSize(new java.awt.Dimension(100, 30));
        CalibRespSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CalibRespSpinnerStateChanged(evt);
            }
        });
        jPanel4.add(CalibRespSpinner);
        jPanel4.add(filler3);

        jLabel2.setText("mW");
        jLabel2.setMaximumSize(new java.awt.Dimension(40, 30));
        jLabel2.setMinimumSize(new java.awt.Dimension(30, 30));
        jLabel2.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel4.add(jLabel2);

        CalibPanelResp.add(jPanel4);
        CalibPanelResp.add(filler2);

        CalibRespSlider.setValue(0);
        CalibRespSlider.setAlignmentX(0.0F);
        CalibRespSlider.setPreferredSize(new java.awt.Dimension(50, 30));
        CalibRespSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CalibRespSliderStateChanged(evt);
            }
        });
        CalibPanelResp.add(CalibRespSlider);

        CalibPanelControls.add(CalibPanelResp);

        CalibrationToolsPanel.add(CalibPanelControls);

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setMaximumSize(new java.awt.Dimension(330, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(330, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(330, 300));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        filler1.setAlignmentX(0.0F);
        jPanel1.add(filler1);

        jPanel2.setMaximumSize(new java.awt.Dimension(310, 350));
        jPanel2.setMinimumSize(new java.awt.Dimension(310, 350));
        jPanel2.setPreferredSize(new java.awt.Dimension(310, 350));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));
        jPanel2.add(filler14);

        CalibAddButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibAddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/add.png"))); // NOI18N
        CalibAddButton.setText("Add Point");
        CalibAddButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibAddButton.setMaximumSize(new java.awt.Dimension(310, 40));
        CalibAddButton.setMinimumSize(new java.awt.Dimension(310, 40));
        CalibAddButton.setPreferredSize(new java.awt.Dimension(310, 40));
        CalibAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibAddButtonActionPerformed(evt);
            }
        });
        jPanel2.add(CalibAddButton);
        jPanel2.add(filler5);

        CalibRemoveButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibRemoveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/delete.png"))); // NOI18N
        CalibRemoveButton.setText("Remove Point");
        CalibRemoveButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibRemoveButton.setMaximumSize(new java.awt.Dimension(310, 40));
        CalibRemoveButton.setMinimumSize(new java.awt.Dimension(310, 40));
        CalibRemoveButton.setPreferredSize(new java.awt.Dimension(310, 40));
        CalibRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibRemoveButtonActionPerformed(evt);
            }
        });
        jPanel2.add(CalibRemoveButton);
        jPanel2.add(filler8);

        CalibSaveButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/save.png"))); // NOI18N
        CalibSaveButton.setText("Save to File");
        CalibSaveButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibSaveButton.setMaximumSize(new java.awt.Dimension(310, 40));
        CalibSaveButton.setMinimumSize(new java.awt.Dimension(310, 40));
        CalibSaveButton.setPreferredSize(new java.awt.Dimension(310, 40));
        CalibSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibSaveButtonActionPerformed(evt);
            }
        });
        jPanel2.add(CalibSaveButton);
        jPanel2.add(filler9);

        CalibLoadButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibLoadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/open.png"))); // NOI18N
        CalibLoadButton.setText("Load from File");
        CalibLoadButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibLoadButton.setMaximumSize(new java.awt.Dimension(310, 40));
        CalibLoadButton.setMinimumSize(new java.awt.Dimension(310, 40));
        CalibLoadButton.setPreferredSize(new java.awt.Dimension(310, 40));
        CalibLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibLoadButtonActionPerformed(evt);
            }
        });
        jPanel2.add(CalibLoadButton);
        jPanel2.add(filler10);

        CalibApplyButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CalibApplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lasermanager/images/upload.png"))); // NOI18N
        CalibApplyButton.setText("Apply Calibration");
        CalibApplyButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CalibApplyButton.setMaximumSize(new java.awt.Dimension(310, 40));
        CalibApplyButton.setMinimumSize(new java.awt.Dimension(310, 40));
        CalibApplyButton.setPreferredSize(new java.awt.Dimension(310, 40));
        CalibApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibApplyButtonActionPerformed(evt);
            }
        });
        jPanel2.add(CalibApplyButton);

        jPanel1.add(jPanel2);

        CalibrationToolsPanel.add(jPanel1);

        CalibrationPanel.add(CalibrationToolsPanel, java.awt.BorderLayout.WEST);

        CalibTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Analog Output, V", "Response, mW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CalibTable.getTableHeader().setReorderingAllowed(false);
        CalibTablePanel.setViewportView(CalibTable);

        CalibrationPanel.add(CalibTablePanel, java.awt.BorderLayout.CENTER);

        MainTabbedPanel.addTab("Calibration", CalibrationPanel);

        MainPanel.add(MainTabbedPanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPanel.add(StatusPanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(MainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeqAddStep(int row) {
        DefaultTableModel m;
        SequenceStep step;
        int valueType = SeqBox.getSelectedIndex() == 0 ? AnalogAction.VALUE_VOLTAGE : AnalogAction.VALUE_WATTAGE;

        step = new SequenceStep(valueType);

        m = (DefaultTableModel) SeqTable.getModel();

        if (row >= m.getRowCount() - 1) {
            m.addRow(new Object[]{step});
        } else {
            m.insertRow(row + 1, new Object[]{step});
        }

        m.fireTableStructureChanged();
        SeqTableRenumber();
        SeqTableUpdateAnalogAction();
        SeqTable.setRowSelectionInterval(row, row);
    }

    private void SequenceStepActionHandler(SequenceStepActionParam param) {
        int row;
        row = SeqTable.getSelectedRow();
        switch (param.EventType) {
            case SequenceStepActionParam.EVENT_ADD:
                SeqAddStep(row);
                break;
            case SequenceStepActionParam.EVENT_DELETE:
                DeleteSequenceStep(row);
                break;
            case SequenceStepActionParam.EVENT_START:
                SequenceStartStep(row);
                break;
            case SequenceStepActionParam.EVENT_EDIT_TRIGGER:
                EditSequenceStepTrigger(row);
                break;
            case SequenceStepActionParam.EVENT_EDIT_ANALOG_ACTION:
                EditSequenceAnalogAction(row, param.ActionIndex);
                break;
            case SequenceStepActionParam.EVENT_EDIT_DIGITAL_ACTION:
                EditSequenceDigitalAction(row, param.ActionIndex);
                break;
                
        }
    }
    
    private void SequenceStartStep(int row)
    {
         comm.ExecuteSeqStep(row);
    }

    private void EditSequenceDigitalAction(int row, int index) {
        DefaultTableModel m;
        SequenceStep step;

        m = (DefaultTableModel) SeqTable.getModel();
        step = (SequenceStep) m.getValueAt(row, 0);

        SequenceDigitalActionDialog dlg = new SequenceDigitalActionDialog(this, true);
        dlg.SetActoin(step.DigitalActions[index]);
        dlg.setTitle("DO " + String.valueOf(index + 1));
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);

        if (dlg.GetResult() == SequenceAnalogActionDialog.RESULT_OK) {
            step.DigitalActions[index] = dlg.Action;
            ((SeqStepEditor) SeqTable.getCellEditor(row, 0)).updateValue(step);
            ((SeqStepRenderer) SeqTable.getCellRenderer(row, 0)).updateValue(step);
            m.fireTableStructureChanged();
            SeqTable.setRowSelectionInterval(row, row);
        }

        dlg.dispose();
    }

    private void EditSequenceAnalogAction(int row, int index) {
        DefaultTableModel m;
        SequenceStep step;

        m = (DefaultTableModel) SeqTable.getModel();
        step = (SequenceStep) m.getValueAt(row, 0);

        SequenceAnalogActionDialog dlg = new SequenceAnalogActionDialog(this, true);
        dlg.SetActoin(step.AnalogActions[index]);
        dlg.setTitle("AO " + String.valueOf(index + 1));
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);

        if (dlg.GetResult() == SequenceAnalogActionDialog.RESULT_OK) {
            step.AnalogActions[index] = dlg.Action;
            ((SeqStepEditor) SeqTable.getCellEditor(row, 0)).updateValue(step);
            ((SeqStepRenderer) SeqTable.getCellRenderer(row, 0)).updateValue(step);
            SeqTableUpdateAnalogAction();
            m.fireTableStructureChanged();
            SeqTable.setRowSelectionInterval(row, row);
        }

        dlg.dispose();
    }

    private void EditSequenceStepTrigger(int row) {
        DefaultTableModel m;
        SequenceStep step;

        m = (DefaultTableModel) SeqTable.getModel();
        step = (SequenceStep) m.getValueAt(row, 0);

        SequenceTriggerDialog dlg = new SequenceTriggerDialog(this, true);
        dlg.SetTrigger(step.Trigger);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);

        if (dlg.GetResult() == SequenceTriggerDialog.RESULT_OK) {
            step.Trigger = dlg.Trigger;
            ((SeqStepEditor) SeqTable.getCellEditor(row, 0)).updateValue(step);
            ((SeqStepRenderer) SeqTable.getCellRenderer(row, 0)).updateValue(step);
        }

        dlg.dispose();
    }

    private void SeqTableRenumber() {
        DefaultTableModel m;
        SequenceStep step;

        m = (DefaultTableModel) SeqTable.getModel();

        for (int i = 0; i < m.getRowCount(); i++) {
            step = (SequenceStep) m.getValueAt(i, 0);
            step.Index = i + 1;
            ((SeqStepEditor) SeqTable.getCellEditor(i, 0)).updateValue(null);
            ((SeqStepRenderer) SeqTable.getCellRenderer(i, 0)).updateValue(null);
        }
    }

    private void SeqTableUpdateAnalogAction() {
        DefaultTableModel m;
        SequenceStep curStep, prevStep;
        m = (DefaultTableModel) SeqTable.getModel();

        prevStep = (SequenceStep) m.getValueAt(m.getRowCount() - 1, 0);

        for (int i = 0; i < m.getRowCount(); i++) {
            curStep = (SequenceStep) m.getValueAt(i, 0);
            for (int j = 0; j < Configuration.AO_COUNT; j++) {
                if (curStep.AnalogActions[j].ActionType == AnalogAction.ACTION_NONE) {
                    curStep.AnalogActions[j].Value = prevStep.AnalogActions[j].Value;
                }
            }

            ((SeqStepRenderer) SeqTable.getCellRenderer(i, 0)).updateValue(null);
            ((SeqStepEditor) SeqTable.getCellEditor(i, 0)).updateValue(null);

            prevStep = curStep;
        }

        m.fireTableStructureChanged();
    }

    private void DeleteSequenceStep(int row) {
        DefaultTableModel m;
        m = (DefaultTableModel) SeqTable.getModel();
        if (m.getRowCount() < 2) {
            return;
        }
        m.removeRow(row);

        if (row > m.getRowCount() - 1) {
            row--;
        }
        SeqTableRenumber();
        m.fireTableStructureChanged();
        SeqTable.setRowSelectionInterval(row, row);
    }

    private void CalibApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibApplyButtonActionPerformed
        ArrayList<FloatPoint> result = new ArrayList<>();
        ArrayList<FloatPoint> source = new ArrayList<>();
        DefaultTableModel m = (DefaultTableModel) CalibTable.getModel();
        if (m.getRowCount() < 2) {
            return;
        }

        FloatPoint ip;
        for (int i = 0; i < m.getRowCount(); i++) {
            ip = new FloatPoint(10.f * (float) (double) m.getValueAt(i, 1), 1000.0f * (float) (double) m.getValueAt(i, 0));
            source.add(ip);
        }

        source.sort((FloatPoint p1, FloatPoint p2) -> {
            if (p1.x > p2.x) {
                return 1;
            }
            if (p1.x < p2.x) {
                return -1;
            }
            return 0;
        });

        int p1;
        int p2;
        float y0;
        float k;

        p1 = source.size() - 2;
        p2 = source.size() - 1;
        k = (source.get(p2).y - source.get(p1).y) / (source.get(p2).x - source.get(p1).x);
        y0 = source.get(p2).y;

        ip = new FloatPoint(source.get(p2).x * 10.0f, y0 + (source.get(p2).x * 9.0f * k));
        source.add(ip);

        int step = (int) Math.ceil((float) (source.get(source.size() - 2).x - source.get(0).x) / (float) (Configuration.MAX_CURVE_SIZE - 1));

        for (int i = 0; i < Configuration.MAX_CURVE_SIZE; i++) {
            ip = new FloatPoint(step * i, 0);
            result.add(ip);
        }

        for (int i = 0; i < Configuration.MAX_CURVE_SIZE; i++) {
            p1 = 0;
            p2 = 0;
            for (int j = source.size() - 1; j >= 0; j--) {
                if (source.get(j).x < result.get(i).x) {
                    p1 = j;
                    break;
                }
            }

            for (int j = 0; j < source.size(); j++) {
                if (source.get(j).x > result.get(i).x) {
                    p2 = j;
                    break;
                }
            }

            k = (source.get(p2).y - source.get(p1).y) / (source.get(p2).x - source.get(p1).x);
            y0 = source.get(p1).y + (result.get(i).x - source.get(p1).x) * k;
            result.get(i).x = y0;
            result.get(i).y = k;
        }

        for (int i = 0; i < result.size(); i++) {
            result.get(i).y = Math.round(result.get(i).y * 1000.0f);
            result.get(i).x = Math.round(result.get(i).x);
        }

        comm.WriteCurve(result, GetCalibChannel(), step);
    }//GEN-LAST:event_CalibApplyButtonActionPerformed

    private void CalibLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibLoadButtonActionPerformed
        FileFilter csvFilter = new FileNameExtensionFilter("CSV Files", new String[]{"csv"});
        fc.setFileFilter(csvFilter);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                Charset charset = Charset.forName("UTF-8");
                List<String> lines;
                lines = Files.readAllLines(file.toPath(), charset);

                DefaultTableModel m;
                m = (DefaultTableModel) CalibTable.getModel();
                m.setRowCount(0);

                String str;
                String parts[];
                for (int i = 0; i < lines.size(); i++) {
                    str = lines.get(i);
                    parts = str.split(";");

                    m.addRow(new Object[]{Double.parseDouble(parts[0]), Double.parseDouble(parts[1])});
                }
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CalibLoadButtonActionPerformed

    private void CalibSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibSaveButtonActionPerformed
        FileFilter csvFilter = new FileNameExtensionFilter("CSV Files", new String[]{"csv"});
        fc.setFileFilter(csvFilter);
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String file = fc.getSelectedFile().getAbsolutePath();
                if (!file.toLowerCase().endsWith(".csv")) {
                    file = file + ".csv";
                }
                FileWriter fw = new FileWriter(file);

                String newLine = System.getProperty("line.separator");

                DefaultTableModel m = (DefaultTableModel) CalibTable.getModel();

                for (int i = 0; i < m.getRowCount(); i++) {
                    fw.write("" + m.getValueAt(i, 0) + ';' + m.getValueAt(i, 1) + newLine);
                }
                fw.close();
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CalibSaveButtonActionPerformed

    private void CalibRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibRemoveButtonActionPerformed
        DefaultTableModel m = (DefaultTableModel) CalibTable.getModel();
        int sel;
        sel = CalibTable.getSelectedRow();
        while (sel >= 0) {
            m.removeRow(sel);
            sel = CalibTable.getSelectedRow();
        }
    }//GEN-LAST:event_CalibRemoveButtonActionPerformed

    private void CalibAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibAddButtonActionPerformed
        DefaultTableModel m = (DefaultTableModel) CalibTable.getModel();
        m.addRow(new Object[]{CalibOutSpinner.getValue(), CalibRespSpinner.getValue()});
    }//GEN-LAST:event_CalibAddButtonActionPerformed

    private void CalibRespSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CalibRespSliderStateChanged
        DefaultBoundedRangeModel m = (DefaultBoundedRangeModel) ((JSlider) evt.getSource()).getModel();
        CalibRespSpinner.setValue((double) m.getValue() * (Configuration.MAX_RESPONSE_POWER / 100.0d));
    }//GEN-LAST:event_CalibRespSliderStateChanged

    private void CalibRespSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CalibRespSpinnerStateChanged
        SpinnerNumberModel m = (SpinnerNumberModel) ((JSpinner) evt.getSource()).getModel();
        CalibRespSlider.setValue((int) Math.round((double) m.getValue() * (100.0d / Configuration.MAX_RESPONSE_POWER)));
    }//GEN-LAST:event_CalibRespSpinnerStateChanged

    private void CalibOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibOutButtonActionPerformed
        int ch = GetCalibChannel();

        int values[] = new int[config.AO_COUNT];
        for (int i = 0; i < config.AO_COUNT; i++) {
            if (i == ch) {
                values[i] = 0x0FFFF & (int) ((double) 0x0FFF * (double) CalibOutSpinner.getValue() / 5.0d);
            } else {
                values[i] = 0x0000;
            }
        }
        comm.WriteVoltage(values);
    }//GEN-LAST:event_CalibOutButtonActionPerformed

    private void CalibOutSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CalibOutSliderStateChanged
        DefaultBoundedRangeModel m = (DefaultBoundedRangeModel) ((JSlider) evt.getSource()).getModel();
        CalibOutSpinner.setValue((double) m.getValue() * (Configuration.MAX_OUT_VOLTAGE / 100.0d));
    }//GEN-LAST:event_CalibOutSliderStateChanged

    private void CalibOutSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CalibOutSpinnerStateChanged
        SpinnerNumberModel m = (SpinnerNumberModel) ((JSpinner) evt.getSource()).getModel();
        CalibOutSlider.setValue((int) Math.round((double) m.getValue() * (100.0d / Configuration.MAX_OUT_VOLTAGE)));
    }//GEN-LAST:event_CalibOutSpinnerStateChanged

    private void ManualWriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualWriteButtonActionPerformed

        DefaultTableModel m;
        if (ManualBox.getSelectedIndex() == 0) {
            // Voltage
            VoltageTable.editingStopped(null);
            m = (DefaultTableModel) VoltageTable.getModel();
            int data[] = new int[config.AO_COUNT];
            for (int i = 0; i < config.AO_COUNT; i++) {
                data[i] = (int) Math.round(4095.0d / 5.0d * (double) m.getValueAt(0, i));
            }
            comm.WriteVoltage(data);
        } else {
            // Wattage
            WattageTable.editingStopped(null);
            m = (DefaultTableModel) WattageTable.getModel();
            float data[] = new float[config.AO_COUNT];
            for (int i = 0; i < config.AO_COUNT; i++) {
                data[i] = (float) (double) m.getValueAt(0, i);
            }

            comm.WriteWattage(data);
        }
    }//GEN-LAST:event_ManualWriteButtonActionPerformed

    private void ManualBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ManualBoxItemStateChanged
        boolean v = (ManualBox.getSelectedIndex() == 0);

        VoltageTablePanel.setVisible(v);
        WattageTablePanel.setVisible(!v);

        ManualTab.updateUI();
    }//GEN-LAST:event_ManualBoxItemStateChanged

    private void SeqBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SeqBoxItemStateChanged
        DefaultTableModel m;
        m = (DefaultTableModel) SeqTable.getModel();
        int row;
        row = SeqTable.getSelectedRow();

        SequenceStep step;
        int valueType = SeqBox.getSelectedIndex() == 0 ? AnalogAction.VALUE_VOLTAGE : AnalogAction.VALUE_WATTAGE;

        for (int i = 0; i < m.getRowCount(); i++) {
            step = (SequenceStep) m.getValueAt(i, 0);
            for (int j = 0; j < Configuration.AO_COUNT; j++) {
                step.AnalogActions[j].ValueType = valueType;
                step.AnalogActions[j].Value = 0.0f;
            }
        }

        m.fireTableStructureChanged();
        SeqTable.setRowSelectionInterval(row, row);
    }//GEN-LAST:event_SeqBoxItemStateChanged

    private void SeqSaveAs() {
        FileFilter jsonFilter = new FileNameExtensionFilter("JSON Files", new String[]{"json"});
        fc.setFileFilter(jsonFilter);
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            SeqFileName = fc.getSelectedFile().getAbsolutePath();
            if (!SeqFileName.toLowerCase().endsWith(".json")) {
                SeqFileName = SeqFileName + ".json";
            }
            SeqSave();
        }
    }

    private void SeqSave() {
        try {
            GsonBuilder builder = new GsonBuilder();
            Gson gson;

            LinkedList<SequenceStep> sequence = new LinkedList<>();
            DefaultTableModel m;
            m = (DefaultTableModel) SeqTable.getModel();
            for (int i = 0; i < m.getRowCount(); i++) {
                sequence.add((SequenceStep) m.getValueAt(i, 0));
            }

            builder.registerTypeAdapter(SequenceStep.class, new SequenceStep.Serializer());
            gson = builder.create();

            String json = gson.toJson(sequence);

            FileWriter fw = new FileWriter(SeqFileName);
            fw.write(json);
            fw.close();
            UpdateTitle();
        } catch (Exception ex) {
            SeqFileName = null;
            this.setTitle(MainTitle);
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void SeqSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeqSaveButtonActionPerformed
        if (SeqFileName == null) {
            SeqSaveAs();
        } else {
            SeqSave();
        }
    }//GEN-LAST:event_SeqSaveButtonActionPerformed

    private void SeqOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeqOpenButtonActionPerformed
        FileFilter jsonFilter = new FileNameExtensionFilter("JSON Files", new String[]{"json"});
        fc.setFileFilter(jsonFilter);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            SeqFileName = fc.getSelectedFile().getAbsolutePath();
            SeqOpen();
        }

    }//GEN-LAST:event_SeqOpenButtonActionPerformed

    private void UpdateTitle() {
        if (SeqFileName == null) {
            this.setTitle(MainTitle);
        } else {
            this.setTitle(MainTitle + " - " + SeqFileName);
        }
    }

    private void SeqOpen() {
        try {
            File file = new File(SeqFileName);
            String json;
            json = new String(Files.readAllBytes(file.toPath()));
            Gson gson = new Gson();
            SequenceStep[] steps = gson.fromJson(json, SequenceStep[].class);

            DefaultTableModel m;
            m = (DefaultTableModel) SeqTable.getModel();
            m.setRowCount(0);

            int valueType;
            valueType = SeqBox.getSelectedIndex() == 0 ? AnalogAction.VALUE_VOLTAGE : AnalogAction.VALUE_WATTAGE;
            SequenceStep step;

            for (int i = 0; i < steps.length; i++) {
                step = steps[i];

                for (int j = 0; j < step.AnalogActions.length; j++) {
                    step.AnalogActions[j].ValueType = valueType;
                }
                m.addRow(new Object[]{step});
            }

            m.fireTableStructureChanged();
            SeqTable.setRowSelectionInterval(0, 0);
            UpdateTitle();
        } catch (Exception ex) {
            this.setTitle(MainTitle);
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void SeqSaveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeqSaveAsButtonActionPerformed
        SeqSaveAs();
    }//GEN-LAST:event_SeqSaveAsButtonActionPerformed

    private void SeqDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeqDeleteButtonActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null, "Delete all sequence steps?", "Warning", JOptionPane.OK_CANCEL_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            DefaultTableModel m;
            m = (DefaultTableModel) SeqTable.getModel();
            m.setRowCount(0);
            SeqAddStep(0);
        }
    }//GEN-LAST:event_SeqDeleteButtonActionPerformed

    private void SeqSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeqSendButtonActionPerformed
        ArrayList<SequenceStep> seq = new ArrayList<>();
        DefaultTableModel m;
        m = (DefaultTableModel) SeqTable.getModel();

        for (int i = 0; i < m.getRowCount(); i++) {
            seq.add((SequenceStep) m.getValueAt(i, 0));
        }

        comm.WriteSequence(seq);
    }//GEN-LAST:event_SeqSendButtonActionPerformed

    private int GetCalibChannel() {
        int ch = 0;
        switch ((String) CalibOutBox.getSelectedItem()) {
            case "AO1":
                ch = 0;
                break;
            case "AO2":
                ch = 1;
                break;
            case "AO3":
                ch = 2;
                break;
            case "AO4":
                ch = 3;
                break;
            case "AO5":
                ch = 4;
                break;
            case "AO6":
                ch = 5;
                break;
            case "AO7":
                ch = 6;
                break;
            case "AO8":
                ch = 7;
                break;
        }
        return ch;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    private class CommMonitorTask implements Runnable {

        private int CommTimer = 50;
        private int PingTimer = 100;

        private final Color CommOnline = new Color(0, 153, 0);
        private final Color CommOffline = new Color(153, 0, 0);

        public void ResetPingTimer() {
            PingTimer = 0;
            CommInd.setBackground(CommOnline);
        }

        @Override
        public void run() {
            while (true) {
                CommTimer++;
                PingTimer++;

                if (PingTimer > 100) {
                    CommInd.setBackground(CommOffline);
                    PingTimer = 0;
                }

                if (CommTimer > 50) {
                    try {

                        SerialPort[] commPorts = SerialPort.getCommPorts();

                        boolean needUpdate = false;

                        if ((commPorts.length + 1) != ComBox.getItemCount()) {
                            needUpdate = true;
                        }

                        if (!needUpdate) {
                            for (int i = 0; i < commPorts.length; i++) {
                                needUpdate = true;
                                for (int j = 0; j < ComBox.getItemCount(); j++) {
                                    if (((String) ComBox.getItemAt(j)).equals(commPorts[i].getSystemPortName())) {
                                        needUpdate = false;
                                        break;
                                    }
                                }

                                if (needUpdate) {
                                    break;
                                }
                            }
                        }

                        if (needUpdate) {
                            ActionListener listeners[] = ComBox.getActionListeners();
                            for (ActionListener listener : listeners) {
                                ComBox.removeActionListener(listener);
                            }

                            ComBox.removeAllItems();
                            ComBox.addItem(EmptyComName);

                            for (SerialPort commPort : commPorts) {
                                ComBox.addItem(commPort.getSystemPortName());
                            }

                            ComBox.addItemListener(new ItemListener() {
                                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                    ComBoxItemStateChanged(evt);
                                }
                            });

                            for (int i = 0; i < ComBox.getItemCount(); i++) {
                                if (ComBox.getItemAt(i).equals(config.ComPortName)) {
                                    ComBox.setSelectedIndex(i);
                                    break;
                                }
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    CommTimer = 0;
                }

                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }

    private class CommMessageHandler implements CommuncatorMessageHandler {

        @Override
        public void Message(Communicator.CommunicatorMessage message) {
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
            Date now = new Date();

            StatusLabel.setText(format.format(now) + " " + message.Message);

            if (message.MessageType == Communicator.MSG_OK) {
                monitorTask.ResetPingTimer();
            }
        }
    }

    private void ComBoxItemStateChanged(java.awt.event.ItemEvent evt) {
        if (EmptyComName.equals((String) evt.getItem())) {
            comm.SetPortName("");
        } else {
            comm.SetPortName((String) evt.getItem());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalibAddButton;
    private javax.swing.JButton CalibApplyButton;
    private javax.swing.JButton CalibLoadButton;
    private javax.swing.JComboBox<String> CalibOutBox;
    private javax.swing.JButton CalibOutButton;
    private javax.swing.JLabel CalibOutLabel;
    private javax.swing.JSlider CalibOutSlider;
    private javax.swing.JSpinner CalibOutSpinner;
    private javax.swing.JPanel CalibPanelControls;
    private javax.swing.JPanel CalibPanelOut;
    private javax.swing.JPanel CalibPanelResp;
    private javax.swing.JButton CalibRemoveButton;
    private javax.swing.JLabel CalibRespLabel;
    private javax.swing.JSlider CalibRespSlider;
    private javax.swing.JSpinner CalibRespSpinner;
    private javax.swing.JButton CalibSaveButton;
    private javax.swing.JTable CalibTable;
    private javax.swing.JScrollPane CalibTablePanel;
    private javax.swing.JPanel CalibrationPanel;
    private javax.swing.JPanel CalibrationToolsPanel;
    private javax.swing.JComboBox<String> ComBox;
    private javax.swing.JPanel CommInd;
    private javax.swing.JPanel CommIndPanel;
    private javax.swing.Box.Filler Filler01;
    private javax.swing.Box.Filler Filler02;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTabbedPane MainTabbedPanel;
    private javax.swing.JComboBox<String> ManualBox;
    private javax.swing.JPanel ManualTab;
    private javax.swing.JPanel ManualToolsPanel;
    private javax.swing.JButton ManualWriteButton;
    private javax.swing.JComboBox<String> SeqBox;
    private javax.swing.JButton SeqDeleteButton;
    private javax.swing.JButton SeqOpenButton;
    private javax.swing.JButton SeqSaveAsButton;
    private javax.swing.JButton SeqSaveButton;
    private javax.swing.JButton SeqSendButton;
    private javax.swing.JPanel SeqTab;
    private javax.swing.JTable SeqTable;
    private javax.swing.JPanel SeqToolsPanel;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JPanel ToolsPanel;
    private javax.swing.JTable VoltageTable;
    private javax.swing.JScrollPane VoltageTablePanel;
    private javax.swing.JTable WattageTable;
    private javax.swing.JScrollPane WattageTablePanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler15;
    private javax.swing.Box.Filler filler16;
    private javax.swing.Box.Filler filler17;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
